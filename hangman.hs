module Hangman
( displayWordSpaced
, checkGuessedChar
, showCharInWord
, showAllCorrectCharsInWord
, getListOfWordsWithCorrectGuesses
, getIncorrectGuesses
, checkIfGuessedBefore
, convertToLowerCase
, checkIfValidWord
, checkIfValidChar
) where

import Data.List
import Data.Char

displayWordSpaced :: String -> String
displayWordSpaced word = intersperse ' ' word

checkGuessedChar :: Char -> String -> Bool
checkGuessedChar guess word = guess `elem` word

showCharInWord :: String -> Char -> String
showCharInWord word guess = displayWordSpaced (map compareCharsPartiallyApplied word)
    where compareCharsPartiallyApplied = compareChars guess

compareChars :: Char -> Char -> Char
compareChars char1 char2
    |char1 == char2 = char1
    |otherwise      = '_'

-- Note that the second parameter of showAllCorrectCharsInWord is
-- initially generated by calling getListOfWordsWithCorrectGuesses
-- with a list of the correctly guessed characters and a string
-- of the word that's being guessed
showAllCorrectCharsInWord :: String -> [String] -> String
showAllCorrectCharsInWord word [] = []
showAllCorrectCharsInWord word (x1:x2:listOfWordsWithCorrectGuesses) = showAllCorrectCharsInWord word (mergedTwoCorrectGuesses :listOfWordsWithCorrectGuesses) 
    where mergedTwoCorrectGuesses = zipWith checkIfBothCharsAreUnderscores x1 x2
showAllCorrectCharsInWord word (x1:[]) = x1

getListOfWordsWithCorrectGuesses :: [Char] -> String -> [String]
getListOfWordsWithCorrectGuesses listOfGuesses word = map partiallyAppliedShowCharInWord listOfGuesses
    where partiallyAppliedShowCharInWord = showCharInWord word

checkIfBothCharsAreUnderscores :: Char -> Char -> Char
checkIfBothCharsAreUnderscores char1 char2
    |char1 == '_' && char2 == '_'  = '_'
    |otherwise                      = nonUnderscoreCharacter
        where nonUnderscoreCharacter = if char1 == '_' then char2 else char1

getIncorrectGuesses :: String -> [Char] -> [Char]
getIncorrectGuesses word listOfGuesses = filter invertedFlippdedGuessedChar listOfGuesses
    where flippedGuessedChar = flip checkGuessedChar
          partiallyAppliedFlippedGuessedChar character = flippedGuessedChar word character
          invertedFlippdedGuessedChar character = not (partiallyAppliedFlippedGuessedChar character)

checkIfGuessedBefore :: [Char] -> Char -> Bool
checkIfGuessedBefore listOfGuesses char = char `elem` listOfGuesses

convertToLowerCase :: String -> String
convertToLowerCase word = map toLower word

checkIfValidWord :: String -> Bool
checkIfValidWord word = not (null (dropWhile (==False) listOfBools))
    where alphabet = ['a'..'z'] ++ ['A'..'Z']
          listOfBools = map (`elem` word) alphabet

checkIfValidChar :: Char -> Bool
checkIfValidChar char = not (null (dropWhile (==False) listOfBools))
    where alphabet = ['a'..'z'] ++ ['A'..'Z']
          listOfBools = map (==char) alphabet
